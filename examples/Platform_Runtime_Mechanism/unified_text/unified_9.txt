Eight. Appendix A: P R M Handler D S M Invocation.There is a significant installed base in the industry that relies on Device Specific Method, or _D S M, mechanisms as an abstraction to invoke platform firmware services. In addition to device hardware interrupts, category three H W S M I s can generate a System Control Interrupt, or S C I, event, which enters the A C P I context via an _L X X method. Therefore, it is essential to provide a mechanism that bridges A C P I Source Language, or A S L, code with the Platform Runtime Mechanism, or P R M, handler to support these invocation scenarios.In essence, the P R M provides a method to execute native machine code from within the A C P I execution environment. A S L serves as the entry point for both software and hardware triggered runtime events. When necessary, A S L invokes the P R M, effectively acting as a proxy for P R M service calls.Eight point one. P R M Op Region Definition.The syntax for the Operation Region construct is defined as follows: Operation Region, followed by a left parenthesis, then four arguments — Region Name, Region Space, Offset, and Length — followed by a right parenthesis. Region Name is a name string that uniquely identifies the region. Region Space is a keyword that specifies the type of address space being accessed. Offset is a term argument representing an integer value that indicates the starting address within the address space. Length is another term argument representing an integer that defines the size of the region in bytes.Accordingly, the P R M Operation Region within the A C P I namespace is declared as: Operation Region, with the arguments [subspace name], Platform R T Mechanism, zero, and one.Here, Region Name is set to [subspace name], a unique identifier for this particular P R M subspace. Region Space must be set to Platform R T Mechanism, which corresponds to operation region type hexadecimal zero B. Offset must be zero, indicating the region starts at the base address. Length must be one, meaning the region spans a single byte.The Platform R T Mechanism operation region supports only one permitted access type: Buffer Access. This means that all reads and writes to this region are performed using a region specific data buffer. Unlike direct memory mapped I O or port I O, Buffer Access requires that data be transferred in complete, atomic units via a structured buffer, ensuring data integrity and simplifying firmware interface design.Eight point one point one. Declaring Fields in the P R M Operation Region.For every Platform R T Mechanism Operation Region, the associated Field declaration must follow the standard Field syntax: Field, followed by a left parenthesis, then Region Name, Access Type, Lock Rule, and Update Rule, followed by a right parenthesis, and then a Field Unit List enclosed in curly braces.For P R M Operation Regions, specific constraints apply. Region Name refers to the previously declared Operation Region, in this case, the one defined with Platform R T Mechanism. Access Type must be set to Buffer Acc, enforcing the use of buffer based data transfers. Lock Rule must be set to No Lock, indicating that access to this region does not require acquisition of the Global Lock for synchronization. This implies that the underlying mechanism either handles synchronization internally or that operations are inherently atomic. Update Rule is not applicable for P R M accesses because each operation is performed in its entirety, ensuring transactional atomicity — the operation either completes fully or not at all.The Field Unit List defines a single field unit of eight bits. The P R M handler is invoked when data is written to this field unit. An example declaration is as follows: Operation Region (P R M R, Platform R T Mechanism, hexadecimal zero, hexadecimal one). Then, Field (P R M R, Buffer Acc, No Lock, Preserve) containing P R M F, eight, enclosed in curly braces.In this example, P R M R is the name of the Operation Region. The Field declaration associates with it using the same name. The access type is Buffer Acc, synchronization is disabled via No Lock, and the Update Rule is Preserve, meaning any bits not explicitly written remain unchanged. P R M F is the name of the field unit, defined as eight bits wide.Eight point one point two. Declaring and Using a P R M Data Buffer.To invoke the P R M Operation Region handler, a buffer object of twenty six bytes must be written to the field unit. This buffer serves a dual purpose: it acts as both the input and the output for the transaction. Similar to protocols such as S M Bus, I P M I, and Generic Serial Bus, the same buffer is used to send a request and receive a response, enabling bidirectional communication through a single data structure.The P R M data buffer is an A S L buffer object that functions as a request and response container for interactions with the P R M handler. Writing this buffer to the P R M field unit triggers the invocation of the handler. Upon completion, the handler populates the buffer with the result, including status codes and any returned data. This bidirectional capability allows the A S L code to capture the outcome of the transaction and perform appropriate error handling when necessary.Table eight dash one. P R M Data Buffer, an A S L Buffer Object.The buffer is structured as follows:Byte offset zero, length one: Data buffer status value. This field is populated by the P R M Operation Region handler and indicates the overall result of the operation. Valid values are:Hexadecimal zero zero: success.Hexadecimal zero one: the P R M handler returned an error. This value is only valid when the command value is zero.Hexadecimal zero two: invalid command value.Hexadecimal zero three: invalid G U I D.Hexadecimal zero four: back to back lock command — an attempt to lock while already in a locked state.Hexadecimal zero five: unlock command called without a prior lock — an attempt to release a lock that was not acquired.Hexadecimal zero six: back to back call to unlock command — an attempt to unlock twice in succession.Hexadecimal zero seven through hexadecimal F F: reserved for future use.Byte offset one, length eight: P R M handler status value. This field is populated by the handler only when the command value is zero. In all other cases, the contents of this field are undefined and must not be interpreted.Byte offset nine, length one: Command value. This field is set by the caller and determines the action to be taken by the P R M handler. Supported values are:Hexadecimal zero zero: run the P R M service associated with the G U I D parameter. This executes the actual service routine.Hexadecimal zero one: start a sequence of P R M calls. This command signals the beginning of a transactional sequence for a specific G U I D. Once started, the P R M module associated with that G U I D must not be updated until the corresponding terminate command is issued. This command does not execute a service; it establishes a protected context for subsequent operations.Hexadecimal zero two: terminate a sequence of P R M calls. This must be called after a start sequence command and signals that the sequence has ended. It allows the P R M module to be safely updated again. Like the start command, this does not invoke a service but closes the transactional context.Hexadecimal zero three through hexadecimal F F: reserved for future command definitions.This structured buffer format enables reliable, stateful communication between A S L and the P R M handler. The use of explicit status codes, conditional field validity, and sequence control commands ensures robustness, error detection, and safe concurrent access to platform runtime services. The design reflects a message based, transactional interface that abstracts low level hardware interactions while preserving the integrity of firmware operations.
