Understanding the requirements of a particular platform-supported operating system, or O S, will greatly affect what optimization paths can be taken in the Basic Input Output System, or B I O S. Since many "open" platforms have a wide variety of operating systems that they support, this limits some of the choices available. In the case of the proof-of-concept platform, there were only two main operating systems that were required to be supported. This enabled the author to make a few choices that allowed the codebase to save roughly four hundred milliseconds of boot time by avoiding the reading of some of the Dual In Line Memory Module, or D I M M, Serial Presence Detect, or S P D, data for creating certain System Management Basic Input Output System, or S M B I O S, records since they weren't used by the target operating systems.Changes in the B I O S codebase that avoided the unnecessary creation of certain tables saved roughly four hundred milliseconds in the boot time. The decision to support legacy operating systems is also crucial, as it can impact boot performance. If all the target operating systems are Unified Extensible Firmware Interface, or U E F I, compliant, then the platform can save roughly zero point five seconds in initialization of the video option Read-Only Memory, or R O M. However, in cases where both U E F I-compliant and non-compliant operating systems need to be supported, the platform must execute a compatibility segment module, or C S M, which can introduce additional overhead.The support for legacy option R O M s is another factor that affects boot performance. Whether or not to launch a legacy option R O M depends on several variables, including the presence of built-in devices on the motherboard that require a legacy option R O M, and whether the platform supports adding devices that need legacy option R O M s. If these conditions are met, the platform must initialize the device associated with the option R O M. To mitigate boot time overhead, a trick can be employed where the B I O S's boot options data set, or B D S, analyzes the target boot variable to determine if the target is associated with a U E F I-compliant O S loader. By doing so, the platform can potentially avoid some of the overhead associated with legacy compatibility support infrastructure.Launching legacy option R O M s can be problematic for boot performance, as there are no standardized rules governing their behavior. In some cases, the option R O M may be relatively benign, while in others, it can significantly delay the boot process. For example, a legacy option R O M may attempt to interact with the user during launch, advertising a hot key or two for the user to press, which can pause the B I O S and delay the boot sequence. To optimize boot performance, it is possible to forgo launching all drivers associated with a particular B I O S and instead launch only the necessary drivers. In one instance, this approach saved approximately three seconds on the platform by avoiding the launch of an option R O M for a S A T A device that had a native U E F I driver.The display of an Original Equipment Manufacturer, or O E M, splash screen is also an important consideration, particularly from a marketing perspective. While the display of the splash screen itself may not take significant time, initializing the video device to enable the display can be time-consuming, typically taking around three hundred milliseconds. The duration for which the logo is displayed depends on the priorities of the O E M, with some platforms requiring a faster boot time and others prioritizing the display of the logo. In some cases, the U E F I event services can be leveraged to take advantage of the marketing-driven delay and accomplish other initialization tasks in parallel.The type of boot media supported is another factor that can impact boot performance. The choice of boot media, such as a S A T A device, can influence the boot time, and the presence of a native U E F I driver for the device can eliminate the need to launch an option R O M, resulting in significant time savings. By carefully considering these factors and employing optimization techniques, such as avoiding unnecessary legacy option R O M launches and leveraging U E F I event services, it is possible to significantly improve boot performance and reduce the overall boot time.
