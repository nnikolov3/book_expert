System failures indicated by a Power On Self Test (POST) code between the end of memory initialization and the first following POST code almost always indicate a catastrophic memory initialization problem. If this is a new design, then chances are this is in the hardware and requires step-by-step debug. Memory Transaction Redirection is a technique employed in legacy systems, particularly with Intel chipsets, to manage memory access for option Read Only Memory (ROM) and Basic Input Output System (BIOS) memory ranges. This involves mapping or "aliasing" sections of memory, typically the first one megabyte, to different physical locations. The redirection is controlled by specific registers, often referred to as Programmable Attribute Maps (PAMs). These PAMs can be configured before, during, and after firmware initialization, offering flexibility in how memory access is handled. For instance, some chipsets allow bidirectional control over memory access redirection, while others permit only read or write operations.A specific scenario described is when PAM registers are set to default values, often represented as all zeros. In this state, accesses to the E and F segments of memory, specifically the address range from E zero zero zero zero to F F F F hexadecimal, are directed to the flash component. This redirection is crucial for the boot process, as it allows the system to access the BIOS firmware stored in flash memory. The benefit of this technique, known as shadowing, is improved boot speed. The process of shadowing involves redirecting reads and writes to memory. By reading the flash device and subsequently writing to memory, data from the flash can be duplicated into system Random Access Memory (RAM). Once this shadowing is complete, the controls for enabling this feature can be modified. For example, the enables for the High Enable (HIENABLE) and Low Enable (LOENABLE) registers can be set to a value of ten, which signifies a write-only operation. This arrangement ensures that memory reads are directed to the shadowed memory locations, preventing accidental overwriting of the image in memory.The performance analysis reveals that the use of PAM registers and shadowing can significantly impact system boot speed. By redirecting memory accesses and duplicating data into system RAM, the system can boot more quickly and efficiently. The specific address ranges and register settings outlined in Table 9.1 provide a detailed example of how this process can be implemented. In the context of System on Chip (SoC) designs, the initialization of Application Processors (APs) is a critical step in the boot process. While the Boot Strap Processor (BSP) is responsible for initial system setup, including memory initialization, the APs must also be initialized with identical features enabled. This involves a firmware process that includes finding and copying microcode into memory, as well as copying the processor's executable code from its initial boot source into faster system memory. This process is essential to avoid "execution in place" penalties and ensure the efficient startup of all processing cores.The initialization of APs may occur during different phases of the boot flow, depending on the specific UEFI (Unified Extensible Firmware Interface) implementation. The location of the AP initialization code may be considered product-dependent, and detailed information can be found in the Software Developer's Manual or BIOS Writer's Guide for the particular processor. In Intel processors, various configurations are packaged, and different terms must be understood when considering processor initialization. A thread refers to a logical processor that shares resources with another logical processor in the same physical package. A core, on the other hand, is a processor that coexists with another processor in the same physical package but does not share any resources with other processors. A package is a "chip" that contains any number of cores and threads. Threads and cores on the same package are detectable by executing the CPUID instruction, which provides information about the processor's capabilities and configuration.To bring a multi-processor system into a stable, operational state, a series of steps must be taken. These include sending Startup Interprocessor Interrupts (IPIs) to all processors, disabling all Non-maskable Interrupt (NEM) settings, loading microcode updates onto all processors, and enabling cache on all processors. These operations are fundamental to ensuring the proper initialization and operation of the system. The specific details of these sequences can be found in the Software Developer's Manual and CPU reference code from Intel, highlighting the importance of low-level hardware control in system initialization.
