The system's initialization process relies heavily on the Basic Input/Output System, or B I O S, which provides fundamental services for hardware interaction. Specifically, interrupt calls are utilized for various functions: Int thirteen h for disk operations, including Redundant Array of Independent Disks, or R A I D, option Read Only Memory, or R O M s; Int sixteen h for P S slash two keyboard interface; and Int ten h for video output from the video B I O S. Additionally, the B I O S's System Management Interrupt, or S M I, handler supports legacy U S B keyboard functionality through port sixty four emulation, ensuring compatibility with older hardware.The operating system, or O S, requires different configuration tables based on the features enabled by the boot loader. These tables include the Memory Map, which defines the system's memory layout, including address ranges for devices and main memory; the Programmable Interrupt Routing, or dollar sign P I R, table, which details interrupt routing to processors or interrupt controllers; and the Multi-Processor Specification, or underscore M P, table, which provides information for initializing and managing multiple processors or cores. The Advanced Configuration and Power Interface, or A C P I, tables are also essential, as they allow the O S to manage hardware power states, thermal management, and configuration settings.A C P I tables are necessary if the system features are enabled by the boot loader and required by the O S. Most modern operating systems, including real-time operating systems, or R T O S, are A C P I aware. The underscore M P table is needed when there is more than one Intel processing agent, and the dollar sign P I R table is almost always required. The boot loader's role is to initialize the hardware and load the O S kernel, and it may provide additional information, such as the Memory Map, to the O S.The O S loader, also known as the initial program loader, or I P L, is responsible for loading and executing the O S kernel. This process is often operating system specific, with different loaders used for various operating systems, such as U boot, Grub, and Sys Linux for Linux, and E boot and R O M boot for Windows C E. The Extensible Firmware Interface, or E F I, plays a crucial role in the booting process, as it allows the O S to interact with the firmware and load the necessary components.Booting a U E F I operating system involves locating the global partition table, or G P T, on bootable media, which contains essential information for the boot process. The default E F I boot behavior searches for a specific path, typically slash E F I slash B O O T, on a F A T formatted G P T partition, and executes the default bootloader, such as bootia sixty four dot e f i for sixty four bit architectures or bootia thirty two dot e f i for thirty two bit machines. Operating system installation programs manage this process by rewriting the N V Var, which controls the boot process, and establishing a new path to the operating system.A second-stage bootloader hands off control to the runtime system by locating the bootloader configuration file, executing commands, and loading the kernel image and ancillary boot data. Modern U E F I systems can directly execute a Linux kernel without a second-stage bootloader, as the Linux kernel can obtain the E F I memory map via U E F I Runtime Services. This extension is fully backward compatible, allowing for seamless execution of the kernel directly from U E F I firmware or using the traditional boot process.
