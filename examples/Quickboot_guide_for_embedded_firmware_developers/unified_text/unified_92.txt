The process of initializing multiple processors in a system involves several critical steps. First, startup Inter-Processor Interrupts, or I P Is, must be sent to all processors. Following this, all Non-maskable Interrupt, or N E M, settings should be disabled if they have not been already. Next, microcode updates must be loaded onto all processors, and cache should be enabled for all processors. These steps are essential for bringing a multi-processor system into a stable and operational state.The Universal Extensible Firmware Interface, or U E F I, perspective on Application Processor, or A P, initialization indicates that this process can occur during either the Pre-installation Environment, or P E I, phase or the Driver Execution Environment, or D X E, phase of the boot flow. The precise timing and location of A P initialization are product-dependent, reflecting variability in system boot sequences.Understanding key terms related to processor packaging and concurrency is crucial. A "Thread" refers to a logical processor that shares resources with another logical processor within the same physical package. This concept is directly related to Simultaneous Multi-Threading, or S M T, where a single physical core can execute multiple threads concurrently. A "Core" is a processor that coexists with another processor on the same physical package but does not share resources with other processors, representing a distinct execution pipeline. A "Package" is a single "chip" that can contain any number of cores and threads. The C P U I D instruction is used to detect threads and cores on the same package, providing detailed information about the processor's features and capabilities.Detecting additional processor packages is a blind process, where the Boot Strap Processor, or B S P, waits for all potential A Ps to "log in." If a timeout occurs or the maximum expected number of processors log in, it is assumed there are no more processors in the system. The Startup Inter-Processor Interrupt, or S I P I, is a critical mechanism for waking up secondary threads or cores. The B S P sends a S I P I to each thread and core, specifying the physical address from which the A P should start executing. This address must be below one megabyte of memory and aligned on a four kilobyte boundary.Upon receiving the S I P I, the A P starts executing the code pointed to by the S I P I message in real mode, requiring the startup code to be located below one megabyte of memory. The entry point to the A P initialization code must also be aligned on a four kilobyte boundary, a guideline elaborated in the Intel sixty-four and I A thirty-two Architectures Software Developer's Manual.Caching considerations are vital to ensure consistency across all processors in the system, preventing caching conflicts. The Intel sixty-four and I A thirty-two Architectures Software Developer's Manual outlines a safe mechanism for changing the cache configuration in multi-processor systems. During firmware initialization, A Ps typically enter a halt state with a H L T instruction after short durations of initialization, awaiting direction from the B S P. To boot an operating system, all A P processors must be placed back in their power-on state, which can be accomplished by the B S P sending an I N I T A S S E R T I P I followed by an I N I T D E A S S E R T I P I to all A Ps. These steps are crucial for the correct initialization and operation of multi-processor systems, ensuring efficient and conflict-free execution of multiple threads and cores.
