The process of initializing a processor involves several critical stages, including the transition from legacy modes to protected mode and the management of processor caches. To begin this process, control registers, specifically CR1 through CR4, are utilized, which are integral components of the Intel x86 architecture for managing processor features and operating modes. Additionally, memory type range registers, or MTRRs, play a crucial role in defining memory attributes, such as cacheability, across different memory regions.The transition to protected mode is initiated by loading specific data structures, code modules, and system registers. A key element in this process is the control register CR0, where a particular bit, the PE flag, signals the activation of protected mode. Once this transition occurs, the system is likely to enter a sixteen-bit operational state, with interactions involving Legacy Option ROMs and the Legacy OS/BIOS interface. This state persists until the next hardware reset. For a deeper understanding of protected mode and real mode switching, reference can be made to the Intel 64 and IA-32 Intel Architecture Software Developer's Manual, specifically Volume 3A, Chapter 9.In the absence of DRAM, the processor's internal cache can be configured and utilized as main memory, a concept known as "Cache as RAM" or CAR. Developers leveraging this configuration must manage code execution within strict timing constraints, as the cache's primary function is data buffering, not permanent storage. An eviction, which occurs when a cache line needs to be replaced to make room for new data, would be paradoxical in this "Cache as RAM" context. To prevent evictions and ensure data integrity, processors often operate in a "no evict mode," referred to as NEM, which maintains coherency within the cache hierarchy by disabling eviction, essentially functioning as a dedicated RAM pool.The processor may also boot into a slower mode than it can perform for various reasons, such as being less risky or to save additional power. In such cases, the BIOS may need to initialize the speed step technology to force the speed to something appropriate for a faster boot. This additional optimization is optional, as the OS will likely have the drivers to deal with this parameter when it loads.Memory configuration is another critical aspect of system initialization. The initialization of the memory controller varies depending on the DRAM technology and the capabilities of the memory controller itself. For System on Chip (SOC) devices, the information on the DRAM controller is often proprietary, and the initialization memory reference code (MRC) is typically supplied by the SOC vendor. Developers must follow a JEDEC initialization sequence for a given DRAM technology, which may involve a single point of entry and a single point of exit for the initialization code, operating within a thirty-two-bit protected mode. The configuration settings encompass various parameters, such as buffer strengths and data loading protocols, which are often chipset-specific.The landscape of DRAM configurations is extensive, presenting a wide array of parameters that influence system performance and capacity. These parameters include the number of memory ranks, address widths, overall memory size, and configurations of Dual In-Line Memory Modules (DIMMs). Given that most embedded systems populate soldered-down DRAM on the board, the firmware may not need to discover the configuration at boot time, as these configurations are known as "memory-down" and the firmware is specifically built for the target configuration.For platforms that support add-in modules for memory, standardized form factors such as the Small Outline Dual In-Line Memory Module (SODIMM) are used. These DIMMs provide a serial EEPROM that contains the DRAM configuration data, known as Serial Presence Detect (SPD) data. The firmware reads the SPD data to identify the device configuration and subsequently configures the device. The serial EEPROM is connected via SMBUS, and the device must be available in the early initialization phase to establish the memory devices on board. It is also possible for memory-down motherboards to incorporate serial presence detect EEPROMs to allow for multiple and updatable memory configurations to be handled efficiently by a single BIOS algorithm. Alternatively, a hard-coded table in one of the MRC files can be provided to allow for an EEPROM-less design.
