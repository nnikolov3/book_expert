The concept of "legacy U S B support" refers to the foundational Universal Serial Bus functionalities that have been integral to computing platforms since the protocol's inception in the nineteen nineties. Integrating this low-level U S B support into the pre-O S environment, specifically within a platform's firmware stack, represents a significant engineering challenge, often requiring multiple man months of dedicated development. This complexity arises from the necessity to instantiate and manage U S B controllers and connected devices before the full operating system is loaded, which inherently lacks the extensive device drivers and resource management capabilities of a mature O S. Consequently, the additional boot time incurred by this pre-O S U S B initialization can be substantial, ranging from several hundred milliseconds to several seconds, depending critically on the number of U S B ports and devices that require enumeration and initialization.Beyond the fundamental pre-O S U S B support, two advanced areas offer enhanced value to a platform: Pre-Boot Authentication, or P B A, and Trusted U S B. Pre-Boot Authentication requires robust U S B support to facilitate the authentication process itself, which typically involves external U S B devices such as security tokens or biometric scanners. This necessitates close collaboration between system Original Equipment Manufacturers and P B A solution vendors to ensure seamless integration and proper functionality of U S B dependent authentication mechanisms within the early boot phases.Trusted U S B, on the other hand, introduces a cryptographic root of trust that anchors the security posture of U S B device interactions from the earliest stages of system boot. In this model, a U S B device is permitted to function only after it has been rigorously authenticated and cryptographically secured, either through the B I O S hardened firmware or under the direct supervision of the operating system's security mechanisms. This establishes a chain of trust that extends from the platform's immutable boot vector through the U S B stack to the connected peripheral, ensuring that only verified and authorized devices can participate in system operations, thereby mitigating risks from malicious U S B devices.Both P B A devices and Trusted U S B rely on sophisticated U S B enumeration and initialization procedures. However, the focus here will be on the non-secure enumeration and initialization, which underpins the basic functionality before additional security layers are applied. In Intel-based platforms, various versions of U S B controllers are implemented within the chipsets and systems on chips. Our specific focus in this context is on the Platform Controller Hub, or P C H, which serves as the central hub for most I O functions, including U S B connectivity.The process of P C I enumeration and initialization is fundamental to bringing U S B controllers online. The simplest form of U S B support during boot relies directly on the P C I enumeration process without additional, complex U S B network initialization. During the P C I enumeration phase, which is orchestrated by the B I O S, the system discovers all P C I compliant devices, including U S B controllers. For each discovered U S B controller, the B I O S assigns Base Address Registers, or B A R S, which are crucial memory-mapped regions that allow the C P U to communicate with the controller's internal registers and memory. Concurrently, Interrupt ReQuests, or I R Q s, are provided to these controllers, establishing a dedicated channel for the U S B controller to signal the C P U when events occur, such as a device connection or data transfer completion. These assignments are critical for the operating system or pre-O S environment to properly identify, configure, and interact with the U S B hardware, enabling basic U S B functionality.In managing U S B controllers, the system firmware can also hide controllers, disable ports, and arm for A C P I wake events. Hiding U S B Controllers' P C I Space is a technique used to conserve P C I resources and achieve power savings. When a device is hidden, an O S is incapable of both discovering and using the hidden device via P C I configuration space. To hide a host controller, the B I O S must program the Function Disable register at R C B A plus hexadecimal three four one eight. Additionally, when disabling U H C I host controllers, the U S B two point zero E H C I Structural Parameters Registers must be updated with coherent information in the "Number of Companion Controllers" and "N_Ports" fields.It is also important to note that the B I O S cannot configure the device to provide U H C I support only in the Intel U S B controllers on the P C H, as this configuration is prevented by the P C I Specification requirements. Therefore, U H C I host controller support must always be accompanied by support from at least one E H C I host controller. To ensure that a disabled U S B function cannot initiate transactions for U S B transfers or be the target of memory or I O requests, the system B I O S must also ensure the controller memory and I O control bits are disabled.Prior to hiding the function, the U S B functionality is disabled in the controller's registers. This involves clearing the Run/Stop bit and verifying that the H C Halted bit becomes set for E H C I and U H C I controllers. The Interrupt disable bit must also be set, and the Asynchronous schedule enable bit and the Periodic schedule enable bit must be cleared. Furthermore, the Wake capabilities, including U H C I, G P E zero Enable, and E H C I, must be managed. Once these settings are configured, the device will remain disabled until the next platform reset occurs.The System B I O S may also choose to disable individual U S B ports for power saving or security reasons. Each U S B port has a corresponding bit within the P C H U S B Port Disable Override Register, which can be locked by setting the Write Enable bit of the P C H U S B Per-Port Register Write Control Register. For U S B Wake from A C P I S x, specifically S three, S four, and S five to S zero power states, the E H C I host controllers are capable of generating the wake signal from the internally routed connections.In conclusion, the management of U S B functionality at the foundational hardware layer involves intricate interactions with various registers and control mechanisms, primarily orchestrated by the system's B I O S or firmware. The process of disabling a U S B host controller requires a methodical sequence of register manipulations to ensure system stability and proper state transitions. This includes controlling the operational state of the U S B host controllers, managing the interrupt landscape, disabling scheduling capabilities, and ensuring that the controller memory and I O control bits are disabled. By understanding these complex interactions and configurations, system designers and developers can optimize U S B functionality, ensure system security, and provide a robust foundation for a wide range of applications and use cases.
