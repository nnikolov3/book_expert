The process of establishing a functional hardware environment within a computer system commences with the discovery and enumeration of the Peripheral Component Interconnect, or P C I, bus infrastructure. This process involves a meticulous traversal of the bus topology, identifying each P C I bridge. A P C I bridge serves as a crucial intermediary, connecting two distinct P C I buses and facilitating communication between devices residing on either side. Once a particular P C I bus segment and its associated devices, nested beneath a bridge, have been entirely discovered and identified, the system must then proceed to assign distinct memory and I O address ranges to these newly found P C I bridges themselves. This hierarchical allocation ensures proper isolation and addressing for subsequent device enumeration within those bridged segments.The architecture of P C I imposes certain constraints on the system's ability to expand. While the P C I specification allows for up to two hundred fifty six distinct P C I buses within a system, a practical limitation arises from the granularity of I O address assignments. Specifically, the minimum allocation unit for I O base and limit registers is four K B. This inherent granularity, when combined with the necessity for each bridge to consume a certain amount of I O address space, practically restricts the number of usable bridges in a given hierarchy to approximately sixteen. This constraint highlights a design trade-off between address space efficiency and the potential for extensive bus expansion.During the configuration phase of the system's chipset and the central processing unit, specifically for P C I and P C I Express devices, several private registers beyond the standard P C I configuration space require programming. These registers are essential for enabling specific functionalities or optimizing performance, often dictating the behavior of P C I Express lanes and their associated ranges. A critical element in modern architectures is the concept of memory-mapped I O configuration spaces. These are regions within the C P U's physical memory address space that directly correspond to device configuration registers. For instance, in many chipset designs, the Root Complex Base Address Register, commonly referred to as R C B A, located at Bus zero, Device thirty one, Function zero, and at Offset hexadecimal F zero, specifies the physical address where the Chipset Configuration Space resides.The method of P C I enumeration presents a significant architectural choice: static versus dynamic configuration. Static P C I enumeration involves a designer pre-defining and hard-coding the mapping of standard registers and address ranges for every device in a particular system. While this approach might appear to save time during system boot by eliminating the need for a dynamic scan, it is generally not considered the optimal method for modern, flexible computing platforms. The dynamic enumeration process, which involves actively traversing and scanning the P C I and P C I E buses to discover and configure devices at boot time, typically takes on the order of twenty milliseconds. This relatively short duration is a small price to pay for the immense flexibility gained. The benefits of dynamic enumeration, specifically its ability to automatically adapt to varying hardware configurations, particularly in systems equipped with multiple P C I Express expansion slots that can host diverse peripherals, overwhelmingly outweigh the marginal return of saving twenty milliseconds by hand-coding a static map.The P C I B I O S Specification version two point one spells out P C I B I O S calls via legacy software interrupt Int one A hexadecimal. However, legacy calls are fast becoming obsolete in the modern world of U E F I. The table titled "P C I B I O S Int one A hexadecimal Function Calls" presents a list of functions and their corresponding A H or A L register values. Each function is identified by a symbolic name and its corresponding hexadecimal value, which would typically be loaded into the A H or A L general-purpose registers before triggering the software interrupt. For instance, the P C I underscore FUNCTION underscore I D function serves as an initial handshake to verify the presence and version of the P C I B I O S. Device enumeration and discovery are facilitated by functions such as FIND underscore P C I underscore DEVICE and FIND underscore P C I underscore CLASS underscore CODE.A crucial set of functions revolve around accessing the P C I configuration space. Each P C I device maintains a set of standardized configuration registers that store essential information like vendor I D, device I D, class codes, and, importantly, Base Address Registers, or B A R s, which define memory or I O regions the device uses. The READ underscore CONFIG underscore BYTE, READ underscore CONFIG underscore WORD, and READ underscore CONFIG underscore D WORD functions allow system software to retrieve information from these configuration registers at byte, word, and double word granularities. Conversely, the WRITE underscore CONFIG underscore BYTE, WRITE underscore CONFIG underscore WORD, and WRITE underscore CONFIG underscore D WORD functions enable the system to write to these registers, configuring the device's operational parameters, resource assignments, and control bits.Finally, interrupt management is handled by GET underscore I R Q underscore ROUTING underscore OPTIONS and SET underscore P C I underscore I R Q. These functions are critical for establishing how P C I device interrupts are mapped to the system's interrupt request, or I R Q, lines. The Get P C I Interrupt Routing Options routine returns the P C I interrupt routing options available on the system motherboard and the current state of what interrupts are currently exclusively assigned to P C I. Routing information is returned in a data buffer that contains an I R Q routing for each P C I device or slot. The format of an entry in the I R Q routing table details the interrupt routing for a specific P C I device or slot, including the P C I Bus Number, P C I Device Number, Link Value for I N T A sharp, I R Q Bitmap for I N T A sharp, Link Value for I N T B sharp, and I R Q Bitmap for I N T B sharp.In contemporary computing environments, most operating systems bypass these legacy B I O S P C I calls. Modern operating systems possess their own P C I bus drivers that directly interact with P C I hardware, leveraging the inherent discoverability of the P C I bus architecture. The P C I specification mandates that devices identify themselves and their resource requirements through their configuration space. This allows the O S to directly read and write to these configuration registers via memory-mapped I O, rather than relying on an intermediary B I O S firmware layer. This direct access provides enhanced performance, greater flexibility, and more comprehensive control over hardware resources. While the B I O S still performs an initial enumeration and basic setup during boot, the operating system typically takes over full management, dynamically loading appropriate device drivers based on the discovered device and class codes. Despite this shift, the functions related to interrupt routing, specifically Get underscore I R Q underscore Routing underscore Options and Set underscore P C I underscore I R Q, sometimes retain utility even in modern systems.
