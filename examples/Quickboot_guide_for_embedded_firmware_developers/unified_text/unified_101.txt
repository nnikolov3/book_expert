The document outlines various memory regions as defined by a legacy interface, categorized by their intended use and accessibility. These regions are crucial for understanding how hardware components are mapped and managed within a system's address space, particularly in contexts involving firmware and operating system interaction. The first category, "Memory (1)", signifies general D Ram available for the operating system's consumption, which is the primary working memory of the system. "Reserved (2)" denotes a region of D Ram addresses that are explicitly not for operating system consumption, suggesting these areas are reserved for specific hardware or firmware functions.The subsequent regions are related to the Advanced Configuration and Power Interface, or A C P I, which is a standard for device configuration and power management. "A C P I Reclaim (3)" identifies memory containing A C P I tables that do not require runtime access, meaning these tables can be utilized by the operating system after initial firmware configuration. Similarly, "A C P I N V S (4)" refers to memory containing A C P I tables that do require runtime access, implying dynamic interaction with these tables by the operating system. The "applicable A C P I specification for details" suggests that the exact nature and behavior of these regions are further elaborated in the A C P I standard documentation."R O M (5)" represents memory that decodes to nonvolatile storage, commonly flash memory, used for firmware storage and execution. "IOAPIC (6)" denotes memory decoded by Input Output A P I Cs, which are interrupt controllers responsible for managing hardware interrupts from peripherals. The note that this memory "must also be uncached" indicates that accesses to this memory region should bypass the C P U caches, ensuring that interrupt status is immediately visible and not subject to stale cached data, crucial for timely interrupt handling. "LAPIC (7)" is analogous, referring to memory decoded by local A P I Cs, which are typically associated with individual processor cores for managing interrupts within that core, and also must be uncached for correct interrupt processing.The document then specifies reserved address ranges within the system memory map, such as the range from hexadecimal zero zero zero zero zero zero zero zero to hexadecimal zero zero zero nine F F F F, which is designated for "Memory", and the range from hexadecimal zero zero A zero zero zero zero to hexadecimal zero zero zero F F F F, marked as "Reserved for legacy option R O Ms and legacy". These reservations ensure that both the operating system and legacy hardware components have access to their required address space without conflict.Further details on memory mapping include regions such as T S E G, which is reserved, and "Graphics Stolen Memory", also reserved, signifying memory allocated for graphics processing that is unavailable to the central processing unit for general use. Specific memory mappings are provided, including ranges associated with the I O A P I C and L A P I C, emphasizing the importance of consulting chipset-specific documentation for precise memory map requirements and referring to the A C P I specification for A C P I-related details. For U E F I systems, the U E F I system tables provide equivalent data.The operating system boot procedure involves configuring the memory map, selecting a boot device from a prioritized list of potential bootable partitions, and using the U E F I "Load Image" command or interrupt nineteen hex to invoke the O S loader, which loads the operating system into memory. The details of this process are covered in a preceding chapter. The boot sequence outlined provides general guidance, although it may need to be adapted based on specific hardware requirements, and additional secure boot implementations may be incorporated to enhance security by checking for signatures of binaries prior to execution. Ultimately, it is essential to refer to the chipset and C P U specifications for the target platform to ensure compatibility and proper functionality.
