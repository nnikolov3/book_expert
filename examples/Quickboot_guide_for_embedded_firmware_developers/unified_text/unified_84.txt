The integration of an S M I handler into the R T O S framework is a crucial aspect of ensuring proper functionality within a real-time operating system environment. If the S M I handler is not incorporated into the R T O S, there is a potential risk of missing important error responses or workarounds, which could lead to system instability or failure. However, if the S M I handler can work in conjunction with the R T O S development, there are additional advantages to be gained from this feature.In the context of processor architecture, the Intel sixty-four architecture supports various operating modes, including I A thirty-two and I A thirty-two e modes. The I A thirty-two e mode is further subdivided into two submodes: compatibility mode and sixty-four-bit mode. In sixty-four-bit mode, the processor offers sixty-four-bit linear addressing and supports a physical address space of up to sixty-four gigabytes. Compatibility mode, on the other hand, is designed to allow legacy protected-mode applications to run without modification, ensuring seamless operation for older software that relies on specific protected-mode features.One of the key operating modes supported by the processor is Virtual-8086 mode, a quasi-operating mode that allows the execution of 8086 software in a protected, multitasking environment. This mode is essential for backward compatibility, enabling older software to function on modern hardware. The processor can transition between various operating modes, including Real Mode, Protected Mode, Virtual-8086 Mode, and System Management Mode, as illustrated in Figure nine point two.The diagram shows that the processor starts in a reset state and can transition to Real Address Mode if the P E bit is zero. If the P E bit is one, it enters Protected Mode. From Protected Mode, a reset or R S M signal can return the processor to Real Address Mode. An S M I number signal from Protected Mode can also lead to System Management Mode. The processor can also be in Virtual-8086 Mode, which is entered from Protected Mode when the V M bit is set to one. A S M I number signal from Virtual-8086 Mode also leads to System Management Mode, and an R S M signal returns the processor to Protected Mode.When the processor is first powered on, it enters a special mode similar to Real Mode, but with the top twelve address lines asserted high. This aliasing allows the boot code to be accessed directly from N V R A M, which is located at physical address hexadecimal F F xxxxx. Upon execution of the first long jump, these twelve address lines are driven according to instructions by firmware. If one of the protected modes is not entered before the first long jump, the processor will enter Real Mode, with only one megabyte of addressability. In order for Real Mode to work without memory, the chipset needs to be able to alias a range of memory below one megabyte to an equivalent range just below four gigabytes to continue accessing N V R A M.The processor continues to boot in Real Mode today, primarily due to backward compatibility concerns and the need to maintain a consistent ecosystem for developers and manufacturers. The first power-on mode is a special subset of Real Mode, allowing the processor to execute code from nonvolatile storage, such as flash, located within the lowest one megabyte as if from the top of memory. Normal operation of the firmware, or B I O S, is to switch modes to flat-protected mode as early in the boot sequence as possible. Once the processor is running in Protected Mode, it usually is not necessary to switch back to Real Mode unless executing a legacy option R O M, which makes certain legacy software interrupt calls.Intel produces B I O S specifications or B I O S writer's guides that provide fine-grain details about chip-specific and technology-specific initialization sequences. These documents outline the necessary steps for early initialization and advanced initialization, ensuring that developers can create compatible and functional firmware for Intel-based systems. The recommended mode for all B I O S or boot loaders to operate in is flat-protected mode, which runs thirty-two-bit code and maps physical addresses onto logical addresses with paging off. The Interrupt Descriptor Table is used for interrupt handling in this mode, providing a robust and efficient mechanism for managing system interrupts.
