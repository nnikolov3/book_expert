The process of optimizing the boot time of a system involves several key strategies. Initially, the system's firmware, specifically the Unified Extensible Firmware Interface (U E F I), can be optimized by reducing the size of the flash memory used. This is achieved by modifying the U E F I build process to utilize a one megabyte flash part instead of the original two megabyte part. By decreasing the number of flash blocks used in the board's flash file system, the access time for data stored within it is improved, as the framework U E F I uses this file system to store PreEFI Initialization (P E I) and Driver Execution Environment (D X E) modules, alongside other system entities.Another critical aspect of boot time optimization is the caching of the P E I phase. Many P E I modules must be executed prior to platform memory initialization. The framework U E F I employs a cache-as-RAM (C A R) strategy for pre-memory storage and the execution stack, running all P E I modules directly from the flash part without caching. However, by simultaneously enabling C A R and a sixty-four kilobyte region of normally cached address space on the Intel Atom processor, the system can take advantage of this pre-memory cacheable region. This involves arranging the U E F I to use a separate flash file system exclusively for P E I modules that run before memory initialization, placing this file system in the cacheable region. Although the sixty-four kilobyte region may not be sufficient to cover all P E I modules, further reduction in the size of P E I can lead to additional improvements.Intel SpeedStep technology is another crucial component in optimizing system performance. This dynamic power management feature adjusts processor clock speeds and voltage based on the system's workload, reducing power consumption during low-demand periods and increasing performance under heavy loads. The B I O S plays a significant role in initializing Intel SpeedStep technology, detecting its capabilities, setting the processor speed for all threads, and advertising these capabilities to the operating system. Typically, the B I O S initializes all processor threads to the "power on" speed, which is the lowest supported speed, to ensure stability during the boot process. The operating system then enables faster speeds as needed. However, to increase boot speed, the B I O S can enable the highest speed setting immediately after the B I O S post, accelerating the loading of the operating system.The Boot Device Selection (B D S) phase of the B I O S initialization sequence can also be optimized. Normally, the B D S phase checks for potential boot devices from various sources, including hard drives, CD-ROM drives, floppy drives, and network interfaces. For platforms that only require booting from a hard disk, optimizations can remove checks for unsupported devices, such as CD-ROM, floppy, and network, thereby streamlining the boot process. If the operating system is loaded from flash instead of a hard disk, the hard disk check can be replaced with an optimized flash boot.Furthermore, using the highest memory speed supported on the platform can significantly improve boot time. This may involve adjusting settings on the board, such as jumpers on platforms featuring the Intel Atom processor, or configuring settings within the B I O S setup on other platforms.Removing the initialization of the P S/two keyboard and mouse in the B I O S can also reduce boot time, as this process is time-consuming due to device specifications. This removal is particularly viable for fielded embedded devices where keyboard and mouse input is not necessary during the boot process. However, during device development and debugging, it might be beneficial to retain this feature until the device is fully operational.Lastly, removing the B I O S setup can further optimize the boot process. The B I O S setup provides a menu for users to configure system settings but is not essential for the boot process itself. By eliminating this step, the system can boot more quickly, especially in environments where user interaction with the B I O S during boot is not required.In summary, optimizing the boot time of a system involves a multifaceted approach, including reducing flash memory size, caching the P E I phase, leveraging Intel SpeedStep technology, optimizing the B D S phase, utilizing the highest memory speed, removing unnecessary device initializations, and streamlining the B I O S setup process. These strategies collectively contribute to a faster and more efficient system boot process, which is particularly important for embedded systems and devices where predictability and speed of initialization are critical.
