The architecture of interrupt handling within computer systems is a complex and multifaceted topic, particularly when focusing on Programmable Interrupt Controllers. At the core of this system are Peripheral Interrupt Request, or PIRQ, signals, which are categorized with symbolic names such as PIRQE, PIRQF, PIRQG, and PIRQH. These PIRQs are mapped to specific register addresses, denoted as D31:F0:Reg 68h through D31:F0:Reg 6Bh, and are accompanied by interrupt vector numbers, ranging from INTIN20 to INTIN23. This mapping establishes a direct correlation between external hardware events signaled via PIRQs and the software-defined interrupt service routines that will handle them.The Local Advanced Programmable Interrupt Controller, or LAPIC, is a fundamental component integrated directly within the processor, responsible for managing the delivery of interrupts to the processor cores. Each LAPIC maintains its own set of registers and a Local Vector Table, or LVT, which defines the specific manner in which interrupts are routed to a particular processor core. For a deeper understanding of the LAPIC's configuration and initialization, one can refer to the Intel 64 and IA-32 Architectures Software Developer's Manual.In addition to the LAPIC, the I/O Advanced Programmable Interrupt Controller, or IOxAPIC, plays a crucial role in expanding the number of available interrupt requests, or IRQs, up to twenty-four. Each IRQ handled by the IOxAPIC has an associated redirection table entry, determining whether an IRQ is enabled or disabled and specifying the Interrupt Descriptor Table, or IDT, vector to which the interrupt will be directed. This mode of operation is exclusively available when the system is running in protected mode, a privileged operating state that enforces memory protection and access control. Further details regarding the initialization of the IOxAPIC can be found in the Chipset BIOS Writer's Guide.The concept of Message Signaled Interrupts, or MSI, represents a more modern interrupt mechanism, where interrupt status and vector information are conveyed through memory-mapped I/O write transactions, rather than through dedicated interrupt pins as with traditional, edge-triggered or level-triggered interrupt lines. However, it is noted that the boot loader typically does not utilize MSI for interrupt handling.The Interrupt Vector Table, or IVT, is a critical data structure residing at memory location zero, containing 256 interrupt vectors. The IVT is used in real mode, with each vector address being 32 bits and consisting of the CS:IP for the interrupt vector. The Interrupt Descriptor Table, or IDT, on the other hand, contains the exceptions and interrupts in protected mode, also comprising 256 interrupt vectors, with the exceptions and interrupts defined in the same locations as the IVT.Exceptions are routines that run to handle error conditions, such as page faults and general protection faults. It is essential to implement placeholders, or dummy functions, for each exception handler to prevent the system from exhibiting unwanted behavior when encountering an unhandled exception. Real-mode Interrupt Service Routines, or ISRs, are used to communicate information between the boot loader and the OS, with examples including INT10h for video services, such as changing video modes and resolution. Legacy programs and drivers often assume the availability of these real-mode ISRs and directly call the INT routine.In the context of interrupt handling, the Platform Controller Hub, or PCH, plays a vital role in routing interrupts, specifically PIRQs, to the interrupt controller. The PCH contains PIRQ routing registers, which hold values such as hexadecimal 60h for PIRQA#, hexadecimal 61h for PIRQB#, and so forth. These registers then route to an 8259 PIC, which receives interrupt requests and generates an interrupt to the CPU. Alternatively, the PIRQ signals can be routed to an IOAPIC, which provides a more modern interrupt handling mechanism. The IOAPIC maps PIRQ signals to specific interrupt input pins, denoted as INTIN16, INTIN17, and so on, allowing the PCH to direct hardware events to the appropriate interrupt handling channels within the system's interrupt architecture.The PIRQ routing table, as detailed in Table 9.2, provides a mapping between the PIRQ# pins, the interrupt router registers in the PCH, and their corresponding connections to the IOxAPIC. This table underscores the critical function of the PCH as an intermediary, translating peripheral requests into standardized interrupt signals that can be managed by either the legacy 8259 PIC or the more advanced IOAPIC, ultimately facilitating efficient interrupt processing by the CPU. The use of specific memory addresses, such as D31:F0, signifies the memory-mapped I/O registers that control these routing functions, highlighting the intricate relationship between hardware and software components in interrupt handling.
