The process of initializing a platform to launch a boot target involves understanding the sequence of operations required to bring a system from an unpowered state to a functional operating environment. A boot target is represented by a series of device and partition identifiers, such as `Acpi (PNP0A03,0)/Pci(1F|1)/Ata(Primary,Master)/HD(Part3,Sig00110011)/\EFI\Boot/\OSLoader.efi`, which specifies the path to the operating system loader in a system utilizing the Unified Extensible Firmware Interface, or U E F I.The boot flow, as illustrated in Figure 10.2, contrasts a "Normal Boot" with an "Optimized Boot". Both flows share the ultimate goal of launching the boot target but differ in their intermediate steps. A normal boot involves a more comprehensive initialization, including finding the VGA device, connecting consoles, connecting all drivers, diagnostics, front page, enumerating boot options, and finally booting. In contrast, an optimized boot streamlines this process by directly connecting the PCI root bridge, installing the OpRom, connecting consoles, performing diagnostics, and then booting.The optimization of a platform's boot performance does not require violating any of the E F I platform initialization design specifications. Instead, it involves examining each module and asking critical questions about what can be eliminated, reduced, or optimized. This approach focuses on achieving minimal behavior associated with initializing the platform and launching the O S loader, such as avoiding the recursive connection of all drivers to all devices.The concept of a firmware volume, or F V, is crucial in organizing BIOS drivers into logical collections associated with their phase of operations or functions. The core initiates two major actions related to drivers: dispatching (loading into memory from flash) and connecting a driver to a device. Platform policy can dictate avoiding unnecessary drivers, such as segregating U S B-related drivers to a specific F V if U S B device boot is not needed.Minimizing the files needed is also essential, as the flash part on which the B I O S is stored is one of the slowest I/O resources in a platform. Reducing the space occupied by the B I O S can shorten the time required for routines to read content into faster areas of the platform, such as memory. This can be achieved by minimizing the drivers required by the platform through a proper study of marketing requirements.The results of a boot time investigation, as depicted in Table 10.4, demonstrate the impact of various changes on boot time and incremental boot time improvement. Understanding these results is crucial for optimizing the boot process and achieving faster system startup times.In summary, optimizing a platform's boot performance involves a careful examination of the boot flow, the elimination of unnecessary steps, and the efficient organization of firmware volumes. By streamlining the boot process and minimizing the files needed, significant improvements in boot time can be achieved without violating E F I platform initialization design specifications. This approach is critical for achieving efficient system startup and responsiveness in modern computing systems.
