The early initialization phase of a system involves readying the bootstrap processor, or B S P, and I O peripherals, which is crucial for configuring the memory controller. In Intel architecture, the device-specific portion of the memory map is highly configurable, with most devices being accessed via a logical P C I bus hierarchy. Although a small number of devices may be memory-mapped, the majority rely on device control registers that are mapped to a predefined I O or M M I O space. This space is configured prior to the system's full operation, enabling the early firmware to establish the memory map for devices critical for initial setup, such as D Ram.The firmware's responsibility extends to confirming the precise configuration of D Ram, which is a crucial component on the motherboard. The Intel architecture reference platform provides a comprehensive overview of this memory mapping, often detailed in documentation such as Figure nine point three. This figure illustrates the memory map of an Intel architecture system at power on, detailing the address space allocation for various components. At the highest address range, from hexadecimal F F F F F F zero zero zero to hexadecimal F F F F F F F F F, lies the Reset Vector, containing the instruction pointer E I P, which points to the last sixteen bytes of memory and is used to initiate program execution upon system reset.Immediately below this, covering a significant portion of the address space down to one megabyte, is unaddressable memory in real mode. This region signifies memory that is not accessible or utilized during the early real mode operation of the processor. The address range from hexadecimal F F F F F F F down to hexadecimal F zero zero zero zero is designated for the Reset Aliased region, which points to the reset vector. Below this, the B I O S or F I R M W A R E resides, occupying the space from hexadecimal F zero zero zero zero up to hexadecimal F zero F F F F. This block contains the essential firmware required for system initialization.Following the B I O S firmware, the Extended System B I O S is mapped from hexadecimal F zero zero zero zero to a lower address, consuming nine hundred sixty K B of memory. Further down, an expansion area is allocated, mapping Read Only Memories for old peripheral cards, occupying eight hundred ninety-six K B. Below this, legacy video card memory is addressed, using seven hundred sixty-eight K B. Finally, the accessible R A M memory occupies the address space from hexadecimal zero zero zero zero zero zero upwards, providing the main memory for the system.The location of the device in the host memory address space is defined by the P C I base address register, or B A R, for each of the devices. The device initialization typically enables all the B A R registers for the devices required as part of the system boot path. The B I O S will assign all devices in the system a P C I base address by writing the appropriate B A R registers during P C I enumeration. Long before full P C I enumeration, the B I O S must enable P C I e B A R and the P C H R C B A B A R for memory, I O, and M M I O interactions during the early phase of boot.Depending on the chipset, there are prefetchers that can be enabled at this point to speed up the data transfer from the flash device. There may also be D M I link settings that must be tuned to optimal performance. The text further elaborates on the role of the Peripheral Component Interconnect or P C I bus in defining the host memory address space. Each device on the P C I bus utilizes Base Address Register or B A R registers to communicate its memory requirements. Upon system initialization, the B I O S typically enumerates all P C I devices and enables their respective B A R registers.This process involves writing appropriate values to these registers to map device memory regions into the system's address space. The B I O S must ensure that P C I e B A Rs and the Platform Controller Hub or P C H Root Complex Base Address or R C B A B A R for memory, I O, and Memory Mapped I O or M M I O interactions are correctly configured during the early boot phase. The chipset may also feature prefetchers that can be activated to accelerate data transfers from flash devices. The configuration of these prefetchers and D M I link settings are crucial for optimizing system performance.C P U initialization is another critical aspect of the boot process, consisting of simple configuring of processor and machine registers, loading a microcode update, and enabling the Local A P I C. Microcode is a hardware layer of instructions involved in the implementation of the machine-defined architecture, most prevalent in C I S C-based processors. Microcode is developed by the C P U vendor and incorporated into an internal C P U R O M during manufacture. Since the infamous "Pentium flaw," Intel processor architecture allows that microcode to be updated in the field either through a B I O S update or via an O S update of "configuration data."Today, an Intel processor must have the latest microcode update to be considered a warranted C P U. Intel provides microcode updates that are written to the writable microcode store in the C P U. The updates are encrypted and signed by Intel such that only the processor that the microcode update was designed for can authenticate and load that update. On socketed systems, the B I O S may have to carry many flavors of microcode update depending on the number of processor steppings supported. It is essential to load the microcode updates early in the boot sequence to limit the exposure of the system to any known errata in the silicon.The B S P microcode update must be loaded before No-Eviction mode is entered. The Local A P I C must be enabled to handle any interrupts that occur early in post, before enabling protected mode. For more information on the Intel A P I C Architecture and Local A P I Cs, please refer to the Intel sixty-four and I A thirty-two Intel Architecture Software Developer's Manual, Volume three A: System. The Local A P I C plays a crucial role in handling interrupts and exceptions, ensuring the system's stability and reliability during the boot process. By loading the microcode update and enabling the Local A P I C, the system can ensure a smooth transition to protected mode and beyond.
