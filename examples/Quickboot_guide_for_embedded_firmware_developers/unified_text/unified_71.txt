The Unified Extensible Firmware Interface, or U E F I, Shell is a command line interface designed to provide a highly customizable environment within the U E F I system. This customization extends to various shell levels and profiles, allowing for a significant degree of flexibility in system configuration and operation. The inherent combinatorial nature of these profiles, potentially reaching sixty-four distinct combinations, implies a sophisticated mechanism for managing and activating specific feature sets. For initial silicon bring-up and debugging, a strategy of employing a level three shell, which encompasses all available profiles, is suggested. This approach serves a dual purpose: it maximizes the available functionality for testing and analysis, and it also results in the largest possible binary size for the shell itself.The U E F I Shell was both specified and designed with the goal of allowing lots of customization. We already covered the sixty-four possible combinations of shell levels and shell profiles. For initial silicon bring-up and debugging, it would be best to try to use a level three shell with all the profiles installed. This would mean that the binary size would be the biggest of all the combinations, but also that the feature set would be the biggest. There is a defined method for adding additional custom profiles into the shell that include any custom shell commands you have developed. The performance analysis reveals that the U E F I Shell's customization capabilities are a key factor in its flexibility and usability.In Figure seven point two, you can see how the U E F I Shell runs on top of the U E F I drivers. You can also see the separation of required and optional components of the shell, which is what allows for the easy customization and modification of the shell. The diagram shows the U E F I Shell two point zero Architectural Layout, with the Shell Library, Shell Applications, and Shell Scripts at the top, and the Shell Core below, which includes the Command-line Parser, Shell Protocol, Shell Console Parser, Command Launcher, Script Processor, and Level three Command Set. The Shell Core interacts with the U E F I P I Interfaces, which in turn interface with the C P U Modules and Chipset Modules within the Hardware layer.To add a command set to the U E F I Shell two point zero, located in the U D K two thousand and ten available at www dot tianocore dot org, add a N U L L Named Library to the shell via your D S C file. This new library must then use the A P I from UefiShellCommandLib to register its commands with the shell core. The shell core will then call into this new library when the registered commands are invoked from the command line of the shell. This registration will include the name of the command, which should not overlap with existing commands in the shell, a function pointer of a specific prototype to be called when the command is run, a required level, zero in this case, the name of this profile, and the identifier for the help content in H I I. The level would be used to remove the command if the build is set for a lower level. The function pointer is for the core to call your library for implementation of the command.The information gathered during this registration process serves specific purposes. The command name is utilized to associate the command with required environment variable profiles, enabling context-aware execution. The help content, which is typically associated with a command, is referenced and displayed when a help command is invoked for that specific command. The shell will by default add the root of each drive, as well as the efi tools and efi boot directories. This means that any tool that wants to appear to be an internal command should reside in one of those three directories. For automatic help system integration, there should be a help file named the same as the application file and with contents contained in dot man file format the same as the shell internal commands, except their information is stored via H I I.Once the internal command, in a profile, or the external application has started, they have the same privileges and almost the same access. A few actions can only be accessed via the UefiShell CommandLib. These actions are centered on internal shell functionality that a few commands need to manipulate, such as shell script interaction, shell alias interaction, and shell map interaction. Note that linking a shell application with the library will work, but per definition, the library functions only when also linked to the shell core, so it functions completely only for internal shell commands. The help system built into the U E F I Shell two point zero core automatically parses a file when someone uses the help command, for example, help less than Your App Name greater than. This file must be in the same location as the application file, and the Unicode text file must have a file format similar to that of the shell internal commands.
