The Super Input/Output, or Super I/O, chip is a fundamental component in many computer systems, managing communication across a range of peripheral interfaces. These interfaces typically include legacy standards such as the P S two, serial, and parallel ports. Although modern systems are increasingly adopting a legacy-free architecture, prioritizing newer interfaces like Universal Serial Bus, or U S B, many still retain support for these older connection types. The decision to implement legacy interfaces is often a trade-off between backward compatibility and the cost and complexity of integration. For detailed specifications and operational nuances, consulting the specific Super I/O datasheet is essential, as it outlines the chip's capabilities and adherence to various interface standards.Within the realm of legacy-free systems, the Universal Serial Bus, or U S B, has become the predominant input device interface. In these environments, where legacy keyboard support might be a requirement, U S B controllers are leveraged as the primary input mechanism. The management and integration of these U S B controllers, particularly for pre-operating system environments, necessitate careful handling. The Enhanced Host Controller Interface, or E H C I, and the more recent eXtensible Host Controller Interface, or X H C I, are the key specifications governing U S B host controller functionality. Enabling the host controller for standard Peripheral Component Interconnect, or P C I, resources is a relatively straightforward process. However, the system must wait for the operating system drivers to take control of the U S B subsystem before U S B devices can be fully utilized.The initialization process for U S B can become significantly more complex when pre-operating system support for E H C I or X H C I is required. In such scenarios, tasks associated with the U S B subsystem's readiness must be managed with greater precision. Legacy U S B implementations often relied on System Management Interrupts, or S M I, handlers to intercept crucial input events. These handlers would effectively trap port sixty-four accesses, which are characteristic of legacy keyboard and mouse command protocols, and then translate these to the appropriate U S B communication structures. Consequently, pre-operating system U S B support, especially when booting from a U S B drive, depends heavily on the robust implementation of these interrupt-driven mechanisms.The Serial Advanced Technology Attachment, or S A T A, interface represents another critical subsystem for storage devices. A S A T A controller typically provides compatibility with the established A T A/I D E programming interface, as well as the Advanced Host Controller Interface, or A H C I. The A H C I programming interface utilizes memory-mapped registers and buffer space, operating with a command-list-based model, distinguishing it from the older P C I I D E bus master I/O block register model. A separate document, referred to as the Intel I/O Controller Hub six, or I C H six, Serial A T A Advanced Host Controller Interface, or S A T A A H C I, Hardware Programming Specification, or H P S, is cited as the source for detailed S A T A software configuration and related considerations.The document then delves into S A T A Controller Initialization, outlining general guidelines for this process during the Power On Self Test, or P O S T, and S three resume states. Specifically, the system B I O S is responsible for restoring all registers that were initialized during P O S T, ensuring a seamless transition. A subsection titled "Setting the S A T A Controller Mode" emphasizes that the system B I O S must program the S A T A controller's mode before commencing other initialization steps. This mode is determined by the S A T A Mode Select, or S M S, field within the Port Mapping register, identified as D thirty-one through F two, register ninety H, bits seven through six. The B I O S should not alter the S A T A controller mode during runtime, and the availability of specific modes is contingent upon the S K U, or Stock Keeping Unit, of the Platform Controller Hub, or P C H, in use.Furthermore, if the system B I O S is configured to enable A H C I mode or R A I D mode, it must set the S A D two bit and potentially access R C B A forty-one H, specifically bit twenty-five. The system B I O S must then ensure that memory space, I/O space, or interrupts for the device are not enabled if the controller is not properly configured for these modes, thereby preventing potential conflicts or errors during device operation. The S A T A controller can operate in several modes, including I D E mode, A H C I mode, and R A I D mode, each with its unique characteristics and requirements. I D E mode is selected by programming the S M S field to zero zero, and it uses the A T A/I D E programming interface. A H C I mode is selected by programming the S M S field to zero one b, and it uses the A H C I programming interface, requiring specific O S driver support. R A I D mode is selected by programming the S M S field to ten b, and it also uses the A H C I programming interface, with specific O S driver support required.In R A I D mode, the R A I D option R O M enables and uses the A H C I programming interface by setting the A E bit, A B A R zero four h brackets thirty-one. One consequence is that all register settings applicable to A H C I mode set by the B I O S must be set in R A I D as well. The other consequence is that the B I O S is required to provide A H C I support. The S A T A controller's mode is crucial for determining its functionality and compatibility with different operating systems and devices. Therefore, careful consideration and proper configuration of the S A T A controller mode are essential for ensuring optimal system performance and functionality.
