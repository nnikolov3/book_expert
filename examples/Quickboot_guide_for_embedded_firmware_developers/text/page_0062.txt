disabled and selects the IDT vector for the associated IRQ. The I/O APIC is

only available when running in protected mode.
Table 3.2: PIC ISA-Compatible IRQ Assignments

8259 IRQ number ISA Interrupt Function

Master 0 Internal Timer (PIT)
Master 1 Keyboard

Master 2 Cascade interrupt to slave 8259
Master 3 Serial Port A
Master 4 Serial Port B

Master 5 Parallel Port

Master 6 Floppy

Master 7 Parallel Port

Slave 8 RTC

Slave 9 Generic

Slave 10 Generic

Slave 11 Generic

Slave 12 PS2 mouse

Slave 13 Coprocessor

Slave 14 Hard disk

Slave 15 Hard disk

The Local APIC

The local APIC is contained inside the processor and controls the interrupt
delivery to the processor. Each local APIC contains its own set of associated
registers, as well as a Local Vector Table (LVT). The LVT specifies the way

the interrupts are delivered to each processor core.
disabled and selects the I D T vector for the associated I R Q. The I O A P I C is only available when running in protected mode.

Table three point two outlines the P I C I S A Compatible I R Q Assignments, detailing the function associated with specific eight two five nine I R Q numbers. For the Master I R Qs, Master zero is assigned to the Internal Timer, or P I T. Master one is assigned to the Keyboard. Master two is for the Cascade interrupt to slave eight two five nine. Master three controls Serial Port A, and Master four controls Serial Port B. Master five is assigned to Parallel Port, Master six to Floppy, and Master seven to Parallel Port. Moving to the Slave I R Qs, Slave eight is assigned to the R T C. Slaves nine, ten, and eleven are all assigned to Generic functions. Slave twelve is for the P S two mouse. Slave thirteen is assigned to the Coprocessor. Finally, Slave fourteen and Slave fifteen are both assigned to the Hard disk.

The Local A P I C

The local A P I C is contained inside the processor and controls the interrupt delivery to the processor. Each local A P I C contains its own set of associated registers, as well as a Local Vector Table, or L V T. The L V T specifies the way the interrupts are delivered to each processor core.
The initial statement describes a fundamental aspect of interrupt handling in computer systems: the role of the I O A P I C. The I O A P I C, or Input Output Advanced Programmable Interrupt Controller, is a hardware component responsible for managing external hardware interrupt requests, or I R Q s, originating from peripheral devices. Its core function involves mapping these physical I R Q s to logical interrupt descriptor table, or I D T, vectors. The I D T is a crucial data structure, maintained by the operating system within the C P U's memory space, which contains pointers to the interrupt service routines designed to handle specific interrupt events. When an I R Q is asserted by a device, the I O A P I C translates this into an I D T vector, which the C P U then uses to jump to the appropriate handler. The condition that the I O A P I C is "only available when running in protected mode" underscores a critical security and stability principle in modern operating systems. Protected mode is a C P U operating state that enforces memory protection, privilege levels, and hardware access controls, ensuring that interrupt handling, a low level system function, is managed securely by the operating system kernel and inaccessible to untrusted user applications.

The table presented, titled "P I C I S A-Compatible I R Q Assignments," illustrates the interrupt architecture of legacy I S A, or Industry Standard Architecture, based personal computers, specifically utilizing the eight two five nine Programmable Interrupt Controller, or P I C. This P I C is a hardware chip that centralizes and prioritizes interrupt requests from various peripheral devices before signaling the C P U. The table effectively maps the fifteen available I R Q lines, from zero to fifteen, to their conventionally assigned hardware functions.

The division of I R Q numbers into "Master" and "Slave" sections, from Master zero through Master seven, and Slave eight through Slave fifteen, reveals a cascaded P I C configuration. This design choice was necessitated by the initial limitation of a single eight two five nine P I C, which could only manage eight distinct interrupt lines. To accommodate more devices, a second eight two five nine P I C was introduced as a slave, with its interrupt output line connected to one of the master P I C's I R Q inputs. In the I S A standard, this cascading connection occurs on I R Q two of the master P I C, meaning that any interrupt generated by a device connected to the slave P I C will first be routed through the slave, then signal I R Q two on the master, before finally being forwarded to the C P U. This effectively expands the number of available hardware interrupt lines from eight to fifteen, though one master line is consumed by the cascade.

Examining specific I R Q assignments within the table highlights the historical significance and functional necessity of interrupts for common peripherals. I R Q zero is dedicated to the Internal Timer, which periodically interrupts the C P U to facilitate operating system scheduling and time-sensitive operations. I R Q one is reserved for the Keyboard, ensuring immediate processing of user input. I R Q s three and four are typically assigned to Serial Port A and Serial Port B, respectively, demonstrating their use by asynchronous communication devices like early modems or mice. The "Cascade interrupt to slave eight two five nine" on I R Q two explicitly confirms the architectural design principle of extending interrupt capabilities. I R Q five and seven are allocated to Parallel Ports, used for devices such as printers. I R Q six is for the Floppy drive, reflecting its prominence in older systems. The slave P I C lines include I R Q eight for the R T C, or Real Time Clock, maintaining system time, and I R Q twelve for the P S two mouse. Notably, I R Q thirteen is for the Coprocessor, which historically referred to the numeric floating point unit, a separate chip that would generate interrupts for exceptions or completion. I R Q s fourteen and fifteen are assigned to the Hard disk, underscoring the performance-critical nature of disk I O and the necessity of dedicated interrupt lines for efficient data transfer. The "Generic" assignments for I R Q nine, ten, and eleven suggest these lines offered more flexibility for system integrators to connect various peripherals beyond the standardized ones. This static, fixed assignment scheme of the I S A P I C, while robust, eventually faced scalability challenges with the proliferation of new hardware devices.

This brings us to the evolution of interrupt management with the Local A P I C. Unlike the external P I C chips of the I S A era, the local A P I C is an integral component of modern multi-core processors, embedded directly within each C P U core. This architectural shift addresses the complexities of interrupt delivery in symmetric multiprocessing, or S M P, systems. The fundamental purpose of the local A P I C is to precisely control and deliver interrupts to its specific processor core. Each local A P I C possesses its own dedicated set of registers for configuration and, critically, a Local Vector Table, or L V T. The L V T serves as a programmatic interface to the local A P I C, allowing the operating system to define how various interrupt sources, including those forwarded from the I O A P I C, inter processor interrupts from other cores, and internally generated events, are handled by that specific core. This fine-grained control over interrupt routing enables advanced features such as interrupt affinity, where certain interrupts can be directed to specific cores, and load balancing across multiple cores. The distributed nature of local A P I C s, working in concert with a centralized I O A P I C, forms the contemporary interrupt delivery infrastructure, providing the flexibility and performance necessary for high throughput, low latency computing in multi-core and multi-processor environments.
