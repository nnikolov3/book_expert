4.USB
a.Universal Serial Bus Specification
b.Universal Host Controller Interface (UHCI) Design Guide

c.Universal Serial Bus (USB) Device Class Definition for Human
Interface Devices (HID)

d.Universal Serial Bus (USB) HID Points of Sale Usage Tables Version
1.01

e.Universal Serial Bus (USB) HID Usage Tables
f.Universal Serial Bus Mass Storage Class Specification Overview

g Universal Serial Bus (USB) Device Class Definition for Physical
Interface Devices (PID)

h.Universal Serial Bus Mass Storage Class Bulk-Only Transport

i.Universal Serial Bus Mass Storage Class Control/Bulk/Interrupt (CBI)

Transport
j.-Universal Serial Bus Mass Storage Class UFI Command Specification

k.Enhanced Host Controller Interface (EHCI) Specification for

Universal Serial Bus
5.Advanced Configuration and Power Interface (ACPI)

a.ACPI Specification 2.0
Here is the extracted text, optimized for text-to-speech narration:

Section four covers U S B, beginning with the Universal Serial Bus Specification. Next is the Universal Host Controller Interface, or U H C I, Design Guide. Following this, the Universal Serial Bus, U S B, Device Class Definition for Human Interface Devices, H I D, is outlined. Further details include the Universal Serial Bus, U S B, H I D Points of Sale Usage Tables, Version one point zero one, and the Universal Serial Bus, U S B, H I D Usage Tables. The document then addresses the Universal Serial Bus Mass Storage Class Specification Overview. It also details the Universal Serial Bus, U S B, Device Class Definition for Physical Interface Devices, P I D. Specific transport methods are covered, such as the Universal Serial Bus Mass Storage Class Bulk Only Transport, and the Universal Serial Bus Mass Storage Class Control Bulk Interrupt, C B I, Transport. Finally, for U S B, there is the Universal Serial Bus Mass Storage Class U F I Command Specification, and the Enhanced Host Controller Interface, E H C I, Specification for Universal Serial Bus.

Section five focuses on the Advanced Configuration and Power Interface, A C P I. Under this section, the A C P I Specification two point zero is listed.
The Universal Serial Bus, or U S B, specification serves as the foundational technical document that defines a standard for connecting peripheral devices to a host computer. This comprehensive standard encompasses aspects from the physical layer, detailing electrical characteristics, cable designs, and connector types, up through the logical and protocol layers, which govern how data is formatted, transmitted, and interpreted. A core principle of U S B is its tiered star topology, enabling a single host controller to manage a hierarchy of devices, including hubs, which act as points for further device attachment. Communication relies on a polling mechanism initiated by the host controller, which schedules various transfer types—control, interrupt, bulk, and isochronous—each optimized for different data characteristics, such as reliability, latency, or bandwidth. This layered approach ensures seamless interoperability across a vast ecosystem of U S B enabled devices.

Within the broader U S B ecosystem, the Universal Host Controller Interface, or U H C I, Design Guide outlines the specifics of the interface between the operating system's software and the hardware host controller. Primarily associated with early U S B one point zero and one point one implementations, particularly from Intel, U H C I places a significant portion of the U S B protocol management burden onto the software driver. The O S driver is responsible for constructing intricate data structures in system memory, such as Transfer Descriptors and Host Controller Driver Lists, which the U H C I compliant hardware then fetches and executes. This design philosophy prioritizes simpler host controller hardware at the expense of increased software complexity and a potentially higher C P U utilization for U S B operations.

The Universal Serial Bus Device Class Definition for Human Interface Devices, or H I D, represents a critical abstraction for input and output peripherals commonly used by humans. Devices such as keyboards, mice, game controllers, and increasingly, specialized point of sale equipment, leverage the H I D specification to standardize their communication with the host. The ingenious design of H I D allows devices to describe their capabilities and data formats to the operating system using a set of self describing reports, eliminating the need for custom, device specific drivers. This is facilitated by the concept of "usage pages" and "usages," which provide a standardized lexicon for a device to enumerate its functions, whether it be a specific keyboard key or a motion axis, thereby greatly enhancing plug and play functionality and user experience.

Further refining the H I D paradigm, the Universal Serial Bus H I D Points of Sale Usage Tables, version one point zero one, extend the general H I D framework to specialized retail applications. This specific document provides standardized definitions for devices commonly found in point of sale environments, such as barcode scanners, magnetic stripe readers, and electronic cash drawers. By defining specific usage pages and usages for these devices, it enables them to be recognized and integrated into existing systems using generic H I D drivers, significantly reducing development complexity and promoting interoperability across the retail hardware landscape. Complementing this, the broader Universal Serial Bus H I D Usage Tables document provides the comprehensive enumeration of all standardized "usages" that H I D devices can report. These tables are fundamental to the H I D architecture, serving as a dictionary that allows a host system to unambiguously interpret the data streams from diverse H I D devices without prior knowledge of their internal design.

The Universal Serial Bus Mass Storage Class Specification Overview details the architecture and protocols that enable U S B devices to emulate conventional storage media, such as hard drives or flash drives, to a host operating system. The core technical concept here is the encapsulation of industry standard Small Computer System Interface, or S C S I, commands within U S B transfers. This allows the host O S to interact with U S B storage devices using its existing S C S I command set and file system drivers, treating them as familiar block level storage. This abstraction layer simplifies device development and ensures broad compatibility, making U S B mass storage a ubiquitous standard for portable and external storage solutions.

A related, albeit more specialized, class is the Universal Serial Bus Device Class Definition for Physical Interface Devices, or P I D. This specification is tailored for devices that provide haptic or force feedback, such as advanced joysticks or steering wheels. The P I D class defines the specific communication protocols and data formats that allow a host system to command actuators within the device to generate physical sensations, enhancing the immersive experience in applications like gaming or simulation. This represents a specialized output dimension of human computer interaction, building upon the principles of H I D.

Within the Mass Storage Class, the Universal Serial Bus Mass Storage Class Bulk-Only Transport, or B O T, defines the most prevalent and efficient transport mechanism. B O T utilizes U S B's bulk transfer type, which is inherently designed for large volume, asynchronous data transfers where integrity is prioritized over strict timing. The protocol operates in a three-stage sequence for each S C S I command: command transmission, data transfer, and status reporting, all performed using bulk endpoints. This robust and straightforward approach makes B O T ideal for high throughput storage devices, as it minimizes overhead and maximizes data efficiency for block oriented input output operations.

An alternative, older transport mechanism for U S B Mass Storage is the Universal Serial Bus Mass Storage Class Control/Bulk/Interrupt, or C B I, Transport. Unlike B O T's unified bulk approach, C B I employs a mixture of U S B transfer types: control transfers for commands, bulk transfers for data, and interrupt transfers for status. While offering theoretical flexibility for certain scenarios, the overhead associated with managing multiple transfer types for a single operation, particularly the interrupt endpoint for status, generally made it less efficient than B O T. Consequently, B O T became the dominant standard for U S B mass storage devices due to its superior performance characteristics for typical block storage workloads. Furthermore, the Universal Serial Bus Mass Storage Class U F I Command Specification defines a subset of S C S I commands specifically used for U S B mass storage devices that emulate floppy disk drives. Although floppy drives are largely legacy hardware, this specification remains pertinent for ensuring compatibility with basic block device interactions, often supported by simpler U S B flash drives to provide a minimal, well understood command set for read and write operations.

The Enhanced Host Controller Interface, or E H C I, Specification for Universal Serial Bus represents a significant architectural evolution in U S B host controllers, particularly for U S B two point zero's high speed mode. E H C I contrasts sharply with U H C I by offloading a much greater degree of U S B protocol processing from the software driver to dedicated hardware within the host controller. This hardware centric approach significantly reduces the C P U overhead associated with U S B communication, enabling substantially higher data throughput and lower latency for high speed U S B devices. E H C I defines sophisticated command structures and hardware queues that allow the host controller to manage complex U S B schedules and transactions with minimal intervention from the central processing unit, thereby improving overall system performance and power efficiency.

Moving beyond U S B, the Advanced Configuration and Power Interface, or A C P I, is a cornerstone industry standard for operating system directed configuration and power management in modern computer systems. A C P I fundamentally shifts the responsibility for power and device management from the system B I O S to the operating system, allowing for far more granular and dynamic control over system resources. This enables sophisticated features such as various sleep states, hibernation, processor power scaling, and hot plugging of peripherals. A C P I superseded earlier power management schemes and is indispensable for contemporary operating systems, contributing significantly to energy efficiency, system stability, and a seamless user experience. The A C P I Specification version two point zero indicates a particular revision of this standard, signifying refinements and extensions beyond previous versions. Each iteration of the A C P I specification incorporates updates to support newer hardware architectures, introduces more advanced power management states, and enhances the A C P I Machine Language, or A M L, used by the B I O S to expose hardware capabilities to the operating system. These continuous updates are crucial for maintaining compatibility with evolving hardware and for enabling the sophisticated power management strategies demanded by modern computing environments.
