PME signal. An enable/disable bit (PME_BO_EN) is provided to support the
resume events from Bus#0 using the PME signal. For supporting EHCI host
controller wake in an ACPI environment the _ PRW ACPI method package to
describe the “Wake from USB 2.0” functionality should also be present under
PCI Bus#0 for each of the EHCI host controllers.

Device (USB7) {

Name ( ADR, 1D00OO)

Name ( PRW, Package ( Y40D, 031)
}

Device (USB8)

Name ( ADR, 120000)

Name ( PRW, Package ( ){0D, 03})

}

USB Enumeration

The system BIOS initializes the EHCI hardware in two phases, PCI
enumeration as outlined above and EHCI initialization outlined next.

EHCI initialization places the EHCI in a fully functional state. While the
operating system USB driver will repeat these steps for its own stack, it is

required for the BIOS to perform for any pre-OS USB functional support.

1. Program Port Routing and ModPhy settings.
2. Perform a Host Controller (HC) Reset.
3. Delay required (X ms).
A P M E signal. An enable slash disable bit, P M E B zero E N, is provided to support the resume events from Bus zero using the P M E signal. For supporting E H C I host controller wake in an A C P I environment, the _P R W A C P I method package to describe the "Wake from U S B two point zero" functionality should also be present under P C I Bus zero for each of the E H C I host controllers.

The document then provides two device definitions. The first is for Device U S B seven. This device has a Name attribute, `_A D R`, with a value of hexadecimal one D zero zero zero zero. It also has a Name attribute, `_P R W`, which is a Package containing the values hexadecimal zero D and zero three. The second definition is for Device U S B eight. This device has a Name attribute, `_A D R`, with a value of hexadecimal one A zero zero zero zero. It also has a Name attribute, `_P R W`, which is a Package containing the values hexadecimal zero D and zero three.

U S B Enumeration.

The system B I O S initializes the E H C I hardware in two phases. The P C I enumeration is outlined above, and the E H C I initialization is outlined next. E H C I initialization places the E H C I in a fully functional state. While the operating system U S B driver will repeat these steps for its own stack, it is required for the B I O S to perform them for any pre O S U S B functional support. The steps are: First, program Port Routing and Mod Phy settings. Second, perform a Host Controller, or H C, Reset. Third, a delay is required, specified as X milliseconds.
The robust operation of modern computing platforms relies critically on sophisticated power management and device enumeration protocols, ensuring both energy efficiency and system stability. A fundamental component in this intricate dance is the Power Management Event, or P M E, signal. This signal, when asserted by a peripheral device, serves as an asynchronous notification to the system that the device requires attention, often to trigger a wake-up from a low-power state. For instance, the `PME_B0_EN` bit acts as an enable or disable control for P M E signals originating specifically from P C I Bus zero, allowing the system to selectively monitor and respond to resume events from devices residing on that particular bus segment.

Crucially, for Enhanced Host Controller Interface, or E H C I, host controllers to properly initiate a wake event in an A C P I environment, the `_PRW` A C P I method package must be present. A C P I, the Advanced Configuration and Power Interface, provides a standardized framework for the operating system to manage power and configure devices. The `_PRW` method, which stands for Power Resources for Wake, is an A C P I predefined control method that precisely describes a device's capability to generate a wake signal and the power resources required to support this functionality. Its presence under P C I Bus zero for each E H C I host controller is essential to properly articulate the "Wake from U S B two point zero" functionality, ensuring that a U S B device can wake the system from a suspended state by generating activity on the U S B bus.

Consider the A C P I Source Language, or A S L, definitions for U S B seven and U S B eight devices. These structured blocks provide the operating system with crucial metadata about the hardware. For `Device (USB7)`, the `Name (_ADR, 1D0000)` line specifies the device's P C I address. The `_ADR` object, an A C P I predefined name, provides a unique identifier for the hardware device, typically encoding its bus, device, and function numbers within a single hexadecimal value, here `hexadecimal one D zero zero zero zero`. This addressing scheme allows the operating system to precisely locate and communicate with the specific U S B host controller hardware. Following this, `Name (_PRW, Package ( ) {0D, 03})` defines the power resources necessary for U S B seven to generate a wake event. The `_PRW` method returns a `Package` data structure containing arguments that detail the power resources capable of generating a wake signal. In this instance, `hexadecimal zero D` and `hexadecimal zero three` represent specific parameters, typically pointing to a General Purpose Input/Output, or G P I O, pin or an A C P I G P I O event that can trigger the wake, and the deepest power state from which the device can wake, respectively.

Similarly, for `Device (USB8)`, the `Name (_ADR, 1A0000)` entry assigns it a distinct P C I address, `hexadecimal one A zero zero zero zero`, enabling its unique identification by the system. The subsequent `Name (_PRW, Package ( ) {0D, 03})` entry indicates that U S B eight possesses identical wake-from-power-state capabilities as U S B seven, utilizing the same power resources to signal a system resume. These A C P I definitions are critical as they enable the operating system to understand the power management capabilities of the U S B host controllers and manage system power states accordingly, allowing for seamless transitions between active and low-power modes while preserving the ability for U S B devices to initiate system wake-up.

Moving to the initial setup phase, U S B enumeration is the systematic process by which the U S B host controller discovers, identifies, and configures connected U S B devices. This critical procedure is handled in a multi-stage fashion. The system B I O S, or Basic Input Output System, first initializes the E H C I hardware in two distinct phases. This pre-O S, or pre-Operating System, initialization is vital because it establishes basic U S B functionality, often required for early boot devices like keyboards and mice, or for booting from a U S B drive. The B I O S places the E H C I into a fully functional state, performing the foundational setup. Subsequently, once the operating system loads, its own U S B driver stack will then perform a similar, but more comprehensive, enumeration process using its internal drivers and protocols.

The B I O S initialization sequence for U S B enumeration involves three primary steps. First, the B I O S programs the port routing and Mod P H Y settings. Port routing determines how U S B data paths are mapped and how interrupts generated by U S B devices are directed to the host controller. Mod P H Y refers to the configuration of the physical layer interface, which handles the actual electrical signaling over the U S B cable. These settings are crucial for ensuring proper signal integrity, data rates, and robust communication between the host and U S B devices. Second, the B I O S performs a Host Controller Reset. This operation brings the U S B host controller to a known, initial state, clearing any previous configurations or error conditions. This ensures a clean slate for the subsequent device discovery process. Third, a specific delay, denoted as X milliseconds, is required after the host controller reset. This delay is not arbitrary; it accounts for the time necessary for the E H C I hardware to stabilize its internal logic, clocks, and voltage regulators after the reset, ensuring that the controller is in a ready state before any further commands are issued or device enumeration attempts are made. Such timed delays are common in hardware initialization sequences to prevent race conditions and ensure reliable operation.
