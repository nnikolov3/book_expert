10

12

16

20

31

Bytes

11

Signature - The signature for this table is the ASCII string
“$PIR”. Byte 0 is a 24h, byte 1 a 50h, byte 2 is a 49h, and byte
3 is 52h.

Version - The version consists of a Minor version byte
followed by a Major version byte. Has to be 0x0100.

Table Size holds the size of the PCI IRQ Routing Table in
bytes. If there were five slot entries in the table, this value
would be 32 1 (53 16) = 112.

PCI Interrupt Router’s Bus

PCI Interrupt Router’s DevFunc - The Device is in the upper
five bits, the Function in the lower three.

PCI Exclusive IRQs - This is an IRQ bitmap that indicates
which IRQs are devoted exclusively to PCI usage. For
example, if IRQ11 is devoted exclusively to PCI and cannot be
assigned to an ISA device, then bit 11 of this 16-bit field
should be set to 1. If there are no IRQs devoted exclusively to
PCI, then this value should be O.

Compatible PCI Interrupt Router - This field contains the
Vendor ID (bytes 10 and 11) and Device ID (byes 12 and 13)
of a compatible PCI Interrupt Router, or zero (0) if there is
none. A compatible PCI Interrupt Router is one that uses the
same method for mapping PIRQn# links to IRQs, and uses the
same method for controlling the edge/level triggering of IRQs.
This field allows an operating system to load an existing IRQ
driver on a new PCI chipset without updating any drivers and
without any user interaction.

Miniport Data - This DWORD is passed directly to the IRQ
Miniport’s Initialize() function. If an IRQ Miniport does not
need any additional information, this field should be set to zero
(0).

Reserved (Zero)

Checksum - This byte should be set such that the sum of all of
the bytes in the PCI IRQ Routing Table, including the
checksum, and all of the slot entries, modulo 256, is zero.
The data presents a structure detailing various byte fields.

At offset zero, spanning four bytes, is the Signature. The signature for this table is the A S C I I string, "dollar P I R". Byte zero is a hexadecimal two four, byte one a hexadecimal five zero, byte two is a hexadecimal four nine, and byte three is a hexadecimal five two.

At offset four, spanning two bytes, is the Version field. The version consists of a Minor version byte followed by a Major version byte. Its value must be hexadecimal zero one zero zero.

At offset six, spanning two bytes, is the Table Size. This field holds the size of the P C I I R Q Routing Table in bytes. For example, if there were five slot entries in the table, this value would be thirty two plus one plus five plus three plus sixteen, which is equal to one hundred twelve.

At offset eight, spanning one byte, is the P C I Interrupt Router's Bus.

At offset nine, spanning one byte, is the P C I Interrupt Router's Dev Func. The Device is defined by the upper five bits, and the Function by the lower three bits.

At offset ten, spanning two bytes, are the P C I Exclusive I R Qs. This is an I R Q bitmap that indicates which I R Qs are devoted exclusively to P C I usage. For example, if I R Q eleven is devoted exclusively to P C I and cannot be assigned to an I S A device, then bit eleven of this sixteen bit field should be set to one. If there are no I R Qs devoted exclusively to P C I, then this value should be zero.

At offset twelve, spanning four bytes, is the Compatible P C I Interrupt Router. This field contains the Vendor I D, found in bytes ten and eleven, and the Device I D, found in bytes twelve and thirteen, of a compatible P C I Interrupt Router, or zero if there is none. A compatible P C I Interrupt Router is one that uses the same method for mapping P I R Q n pound links to I R Qs, and uses the same method for controlling the edge slash level triggering of I R Qs. This field allows an O S to load an existing I R Q driver on a new P C I chipset without updating any drivers and without any user interaction.

At offset sixteen, spanning four bytes, is the Miniport Data. This D word is passed directly to the I R Q Miniport's Initialize function. If an I R Q Miniport does not need any additional information, this field should be set to zero.

At offset twenty, spanning eleven bytes, is a Reserved field, which should be set to Zero.

Finally, at offset thirty one, spanning one byte, is the Checksum. This byte should be set such that the sum of all of the bytes in the P C I I R Q Routing Table, including the checksum and all of the slot entries, modulo two hundred fifty six, is zero.
The structure presented delineates a crucial firmware data block, likely residing within the B I O S or U E F I, which provides essential configuration information to the operating system regarding P C I interrupt routing. This table defines the mapping and control mechanisms for interrupt requests generated by P C I devices, enabling proper system functionality and interoperability.

Commencing at byte offset zero, the initial four bytes constitute the table's signature. This signature, expressed as the A S C I I string dollar sign P I R, serves as a unique identifier for the data structure. Its constituent bytes, specifically hexadecimal two four, hexadecimal five zero, hexadecimal four nine, and hexadecimal five two for bytes zero through three respectively, allow system software to rapidly identify and validate the presence and type of this routing table within memory or firmware images. This mechanism is fundamental to system boot processes and resource discovery, ensuring that the operating system can reliably locate and interpret critical hardware configuration data.

Following the signature, at byte offset four, a two byte field specifies the version of this P C I interrupt routing table. This version information, composed of a minor version followed by a major version, allows for backward compatibility and future extensibility of the table format. The requirement for this field to be hexadecimal zero one zero zero indicates a standard version one point zero, which is critical for ensuring that an operating system's P C I subsystem parser can correctly interpret the subsequent data layout, mitigating potential compatibility issues across different hardware platforms or firmware revisions.

The two bytes at offset six define the total size of the P C I I R Q Routing Table in bytes. This field is paramount for memory management and parsing, as it informs the system how much memory to allocate or scan for the entire table, including its header and any variable-length entries that might follow. The example given, indicating that five slot entries would result in a table size of one hundred twelve bytes, highlights the dynamic nature of such tables, where the total size is a function of the fixed header size and the number of variable-length routing entries. This design permits scalability while maintaining a consistent header structure.

At byte offset eight, a single byte specifies the P C I Interrupt Router's Bus number. This value identifies the specific P C I bus segment to which the interrupt router device is connected. In the hierarchical P C I topology, bus numbers provide a critical component of a device's unique address, enabling the operating system to traverse the P C I bus hierarchy and locate the precise hardware component responsible for managing interrupts.

Immediately following, at byte offset nine, another single byte field, P C I Interrupt Router's Dev Func, specifies the device and function number of the P C I Interrupt Router. P C I devices can expose multiple functions, each with its own capabilities. This field, typically parsed with the upper five bits representing the device number and the lower three bits representing the function number, precisely identifies the P C I device and its specific function that acts as the system's interrupt router. This granular addressing is essential for precise configuration and control of interrupt delivery.

Bytes ten and eleven contain the P C I Exclusive I R Qs, a sixteen bit bitmap that delineates which I R Q lines are exclusively dedicated to P C I usage. Each bit in this field corresponds to a specific I R Q number. If a bit is set to one, it signifies that the corresponding I R Q is reserved for P C I devices and cannot be allocated to a legacy I S A device. Conversely, a zero indicates no such P C I exclusivity for that I R Q. This bitmap is crucial for interrupt resource arbitration and prevents conflicts between different bus architectures, ensuring robust interrupt handling within a mixed bus environment. If no I R Qs are exclusively dedicated to P C I, this field must be set to zero.

A four byte field starting at offset twelve identifies a Compatible P C I Interrupt Router. This field comprises a Vendor I D in bytes ten and eleven of this four byte block, and a Device I D in bytes twelve and thirteen. These identifiers are fundamental for device enumeration and driver binding in an operating system. A value of zero for both the Vendor and Device I D signifies that no compatible P C I Interrupt Router is present or specified. The presence of a non-zero value indicates that a specific P C I interrupt router device, identified by its Vendor and Device I D, is compatible and should be used. This mechanism allows the operating system to dynamically adapt to different chipsets and their interrupt controllers. Furthermore, it specifies that this compatible router must use the same method for mapping P I R Q n links to I R Qs and employ the same edge or level triggering method for interrupts as the current system. This capability is vital for operating system portability and allows a system to load an existing I R Q driver even on new P C I chipsets without requiring driver updates or user intervention, streamlining system bring-up and maintenance.

The four bytes starting at offset sixteen represent Miniport Data. This D W O R D, or double word, is a parameter passed directly to the I R Q Miniport's Initialize function. A miniport driver is a kernel mode component, typically part of a larger driver model, responsible for direct hardware interaction, abstracting the specifics of the hardware from the higher level operating system components. If a given I R Q miniport driver does not require any additional initialization information, this field is set to zero, signifying no custom parameters.

Following the Miniport Data, bytes twenty through thirty, spanning eleven bytes, are designated as Reserved. These bytes must be set to zero. Reserved fields are a common practice in data structure design, providing flexibility for future revisions of the specification. By reserving these bytes, designers can expand the data structure with new fields in later versions without breaking compatibility with older software that expects the current format, as long as the older software simply ignores the reserved bytes.

Finally, at byte offset thirty one, a single byte serves as a Checksum. This field ensures data integrity for the entire P C I I R Q Routing Table. The value of this byte is computed such that the sum of all bytes within the P C I I R Q Routing Table, including the checksum byte itself and all subsequent slot entries, when calculated modulo two five six, results in zero. This simple error detection mechanism allows the system to verify that the table has not been corrupted during storage or transmission, preventing the operating system from attempting to configure hardware with invalid interrupt routing information, which could lead to system instability or crashes. The checksum is a foundational concept in data transmission and storage, providing a low-overhead method for detecting accidental data modification.
