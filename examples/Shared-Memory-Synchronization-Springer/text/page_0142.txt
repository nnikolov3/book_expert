Detected 74 diacritics
146 8 Nonblocking Algorithms

PREVp CURR NEXT PREVp CURR NEXT

BPs Hg

l— —— — —
---—"

re STS —RT
head head
(a) (b)
PREVp CURR NEXT PREVp CURR NEXT

nine) 0 OO

Sn
-_——
—_——
—
~

y
a Ey ey pm Br pp B
head head
(c) (d)

Figure 8.6 Searching within an H&M list. PREVp is a pointer to a markable counted pointer (ptr);
CURR and NEXT are ptrs. Diagrams (a), (b), (¢), and (d) show the final positions of PREVp, CURR,
and NEXT when the searched-for value is < 10, < 20, < 30, and > 30, respectively. The return value
of search will be true if and only if the value is found precisely at *CURR.

to merely lock-free). Searches ignore marks on next pointers, and can traverse nodes even
after they have been removed from the list. The correctness argument for this strategy is
both subtle and clever.

Timnat et al. (2015) introduced a list that improves on the back pointer idea of Fomitchev
and Ruppert. Instead of adding a separate back pointer field to each node, the algorithm reuses
the next pointer of a deleted node as the back pointer. This strategy allows an operation to find
its way back to an unmarked node simply by following next pointers (eliminating the need
to check whether a node 1s marked to determine whether to follow the next or back pointer).
To ensure correctness, the algorithm must simultaneously delete a node and change its next
pointer to point to the previous node.! To effect this simultaneity, the algorithm employs a
sophisticated synchronization primitive called multi-compare-multi-swap (MCMS, a.k.a.
k-CAS), which allows changes to multiple memory addresses to occur atomically. (We
consider such higher-level constructs in Sec. 8.10.) MCMS can be implemented in software
using CAS, and can be accelerated using hardware transactional memory on certain recent
processors (Sec. 9.2).

Braginsky and Petrank (2011a) proposed a lock-free chunked linked list algorithm. The
key idea 1s to reduce the impact of pointer changing by packing multiple values into each
linked list node.

LIf the back pointer were changed before the node was deleted, then a cycle would be created in the
list, and could remain in place indefinitely if the calling thread stalled or crashed. On the other hand,
if the node were deleted first and then the thread stalled or crashed, the next pointer might remain
unchanged indefinitely, and threads traversing the node would not have access to a back pointer.
one hundred forty six

eight Nonblocking Algorithms

Figure eight point six Searching within an H and M list. PREV p is a pointer to a markable counted pointer P T R. CURR and NEXT are P T R s. Diagrams a, b, c, and d show the final positions of PREV p, CURR, and NEXT when the searched for value is less than or equal to ten, less than or equal to twenty, less than or equal to thirty, and greater than thirty respectively. The return value of search will be true if and only if the value is found precisely at CURR.

to merely lock free. Searches ignore marks on next pointers, and can traverse nodes even after they have been removed from the list. The correctness argument for this strategy is both subtle and clever.

Timnat et al. 2015 introduced a list that improves on the back pointer idea of Fomichev and Ruppert. Instead of adding a separate back pointer field to each node, the algorithm reuses the next pointer of a deleted node as the back pointer. This strategy allows an operation to find its way back to an unmarked node simply by following next pointers, eliminating the need to check whether a node is marked to determine whether to follow the next or back pointer. To ensure correctness, the algorithm must simultaneously delete a node and change its next pointer to point to the previous node. To effect this simultaneity, the algorithm employs a sophisticated synchronization primitive called multi compare multi swap MCMS, a k a k CAS, which allows changes to multiple memory addresses to occur atomically. We consider such higher level constructs in Section eight point ten. MCMS can be implemented in software using CAS, and can be accelerated using hardware transactional memory on certain recent processors See Section nine point two.

Braginsky and Petrank 2011a proposed a lock free chunked linked list algorithm. The key idea is to reduce the impact of pointer changing by packing multiple values into each linked list node.

one If the back pointer were changed before the node was deleted, then a cycle would be created in the list, and could remain in place indefinitely if the calling thread stalled or crashed. On the other hand, if the node were deleted first and then the thread stalled or crashed, the next pointer might remain unchanged indefinitely, and threads traversing the node would not have access to a back pointer.
The provided content delves into the intricacies of nonblocking algorithms, specifically focusing on data structure operations in concurrent environments. At its core, it discusses strategies for searching and modifying linked lists in a manner that avoids traditional locking mechanisms, thereby preventing potential deadlocks and improving scalability.

Figure 8.6 illustrates the concept of searching within a hand over hand locked list, often referred to as an H&M list. This data structure utilizes a marked counted pointer mechanism. A pointer, denoted as P R E V p, points to the previous node, while C U R R points to the current node being examined, and N E X T points to the subsequent node. The diagrams labeled (a) through (d) depict the state of these pointers during a search operation, showing their positions relative to nodes containing values ten, twenty, and thirty. The return value of a search is considered true if the sought value is precisely located at the current pointer's target node, and it is predicated on the search value being less than or equal to ten, twenty, or thirty respectively, or greater than thirty. A crucial aspect of this search strategy is its ability to traverse nodes even when their next pointers are marked, which signifies that the node has been removed from the list. The robustness of this approach hinges on the argument that searches can proceed unhindered by such marks, implying that the traversal logic correctly interprets the state of the list despite concurrent modifications.

The text then elaborates on the challenge of ensuring correctness in concurrent linked list operations, particularly when dealing with node deletions. A strategy introduced by Timnat, Fomichev, and Ruppert in their 2015 work involves an elegant reuse of pointer fields. Instead of introducing a dedicated back pointer field into each node, this approach designates the next pointer of a logically deleted node to serve as its back pointer. This design allows an operation to efficiently locate the predecessor of a node simply by following the next pointers, thus avoiding the need to maintain separate back pointers. To guarantee the integrity of this strategy, an operation must atomically perform the deletion of a node and the modification of its predecessor's next pointer. This atomicity is achieved through a sophisticated synchronization primitive known as multi compare multiple swap, or M C M S, also referred to as k C A S. This primitive enables the simultaneous modification of multiple memory locations. The text notes that such M C M S operations can be implemented in software, or alternatively, can be accelerated through hardware transactional memory on contemporary processors, as discussed in Section 9.2.

Furthermore, Braginsky and Petrank, in their 2011 publication, introduced a lock-free variation of a chunked linked list algorithm. Their key innovation lies in reducing pointer overhead by packing multiple values into each linked list node, thereby improving cache utilization and potentially performance.

A critical consideration highlighted in footnote one pertains to the implications of pointer modification timing relative to node deletion. If a back pointer is updated before the node it points to is removed from the list, and if that node is subsequently deleted, the back pointer might remain pointing to a deallocated memory location. This could lead to a cycle in the list if the calling thread stalls or crashes, leaving other threads attempting to traverse the list with a dangling pointer, unable to reach a valid back pointer. Conversely, if the back pointer update occurs after the node deletion, the next pointer of the preceding node might remain unchanged, potentially preserving access to the back pointer, but this scenario also presents complexities regarding the consistency of the list state.
